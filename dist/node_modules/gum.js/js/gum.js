import katex from '../../katex/dist/katex.js';

// gum.js

/**
 ** defaults
 **/

// namespace
let ns_svg = 'http://www.w3.org/2000/svg';

// sizing
let size_base = 500;
let rect_base = [0, 0, size_base, size_base];
let coord_base = [0, 0, 1, 1];
let prec_base = 13;

// fonts
let font_family_base = 'IBMPlexSans';
let font_weight_base = 100;
let font_size_base = 12;
let font_size_latex = 14;

// plot defaults
let num_ticks_base = 5;
let tick_size_base = 0.025;
let tick_label_size_base = 2.0;
let label_size_base = 0.06;
let label_offset_base = 0.15;
let title_size_base = 0.1;
let title_offset_base = 0.1;
let limit_base = [0, 1];
let N_base = 100;

// default styling
let svg_props_base = {
    stroke: 'black',
    fill: 'none',
    font_family: font_family_base,
    font_weight: font_weight_base,
};

// text sizer
let textSizer = null;

// use canvas sizer
function canvasTextSizer(ctx, text, args) {
    let {family, weight, size, actual} = args ?? {};
    family = family ?? font_family_base;
    weight = weight ?? font_weight_base;
    size = size ?? font_size_base;
    actual = actual ?? false;

    ctx.font = `${weight} ${size}px ${family}`;
    let met = ctx.measureText(text);

    let x, y, w, h;
    if (actual) {
        x = -met.actualBoundingBoxLeft;
        y = -met.actualBoundingBoxDescent;
        w = met.actualBoundingBoxRight - x;
        h = met.actualBoundingBoxAscent - y;
    } else {
        x = 0;
        y = 0;
        w = met.width;
        h = size;
    }

    return [x, y, w, h];
}

function sideRenderTextSizer(html, args) {
    let {family, size, actual} = args ?? {};
    family = family ?? font_family_base;
    size = size ?? font_size_base;
    actual = actual ?? false;

    let textDiv = document.createElement('div');
    textDiv.id = 'sizer';
    document.body.appendChild(textDiv);

    textDiv.style.fontSize = `${size}px`;
    textDiv.style.position = 'absolute';
    textDiv.style.top = '0';
    textDiv.style.left = '0';
    textDiv.style.fontFamily = family;
    textDiv.style.visibility = 'hidden';

    textDiv.innerHTML = html;
    let rect = textDiv.getBoundingClientRect();

    let x, y, w, h;
    if (actual) {
        x = rect.left;
        y = rect.top;
        w = rect.width;
        h = rect.height;
    } else {
        x = 0;
        y = 0;
        w = rect.width;
        h = size;
    }

    document.body.removeChild(textDiv);

    return [x, y, w, h];
}


// try for browser environment
try {
    let canvas = document.createElement('canvas');
    let ctx = canvas.getContext('2d');
    textSizer = function(text, args) {
        return canvasTextSizer(ctx, text, args);
    };
} catch (error) {
    // console.log(error);
}

/**
 ** general utils
 **/

function* gzip(...iterables) {
    if (iterables.length == 0) {
        return;
    }
    let iterators = iterables.map(i => i[Symbol.iterator]());
    while (true) {
        let results = iterators.map(iter => iter.next());
        if (results.some(res => res.done)) {
            return;
        } else {
            yield results.map(res => res.value);
        }
    }
}

function zip(...iterables) {
    return [...gzip(...iterables)];
}

function sum(arr) {
    arr = arr.filter(v => v != null);
    return arr.reduce((a, b) => a + b, 0);
}

function any(arr) {
    return arr.reduce((a, b) => a || b);
}

function cumsum(arr, first) {
    let sum = 0;
    let ret = arr.map(x => sum += x);
    return (first ?? true) ? [0, ...ret] : ret;
}

// fill in missing values to ensure: sum(vals) == target
function distribute_extra(vals, target) {
    target = target ?? 1;
    let nmiss = vals.filter(v => v == null).length;
    let total = sum(vals);
    let fill = (nmiss > 0) ? (target-total)/nmiss : 0;
    return vals.map(v => v ?? fill);
}

function range(i0, i1, step) {
    step = step ?? 1;
    [i0, i1] = (i1 === undefined) ? [0, i0] : [i0, i1];
    let n = floor((i1-i0)/step);
    return [...Array(n).keys()].map(i => i0 + step*i);
}

function linspace(x0, x1, n) {
    if (n == 1) { return [0.5*(x0+x1)]; }    let step = (x1-x0)/(n-1);
    return [...Array(n).keys()].map(i => x0 + step*i);
}

function enumerate(x) {
    let n = x.length;
    let idx = range(n);
    return zip(idx, x);
}

function repeat(x, n) {
    return Array(n).fill(x);
}

function split(x, n, pad) {
    let ret = [];
    while (x.length > n) {
        ret.push(x.slice(0, n));
        x = x.slice(n);
    }
    if (pad != null && x.length < n) {
        x = [...x, ...repeat(pad, n-x.length)];
    }
    ret.push(x);
    return ret;
}

function ensure_vector(x, n) {
    if (!is_array(x)) {
        return range(n).map(i => x);
    } else {
        return x;
    }
}

function is_scalar(x) {
    return (
        (typeof(x) == 'number') ||
        (typeof(x) == 'object' && (
            (x.constructor.name == 'Number') ||
            (x.constructor.name == 'NamedNumber')
        ))
    );
}

function is_string(x) {
    return typeof(x) == 'string';
}

function is_object(x) {
    return typeof(x) == 'object';
}

function is_array(x) {
    return Array.isArray(x);
}

function is_element(x) {
    return x instanceof Element;
}

/**
 ** core math
 **/

// to be used in functions
class NamedNumber extends Number {
    constructor(name, value) {
        super(value);
        this.name = name;
    }
}

// functions
let exp = Math.exp;
let log = Math.log;
let sin = Math.sin;
let cos = Math.cos;
let tan = Math.tan;
let abs = Math.abs;
let pow = Math.pow;
let sqrt = Math.sqrt;
let floor = Math.floor;
let ceil = Math.ceil;
let round = Math.round;

// null on empty
function min(...vals) {
    vals = vals.filter(v => v != null);
    return (vals.length > 0) ? Math.min(...vals) : null;
}
function max(...vals) {
    vals = vals.filter(v => v != null);
    return (vals.length > 0) ? Math.max(...vals) : null;
}

// constants
let pi = new NamedNumber('pi', Math.PI);
let phi = new NamedNumber('phi', (1+sqrt(5))/2);
let r2d = new NamedNumber('r2d', 180/Math.PI);

/**
 ** random number generation
 **/

let random = Math.random;

function random_uniform(lo, hi) {
    return lo + (hi-lo)*random();
}

// Standard Normal variate using Box-Muller transform.
function random_gaussian(mean, stdv) {
    let [u, v] = [1 - random(), random()];
    let [r, t] = [sqrt(-2*log(u)), 2*pi*v];
    let [a, b] = [r*cos(t), r*sin(t)];
    return [a, b].map(x => mean + stdv*x);
}

/**
 ** coordinate utils
 **/

// convenience mapper for rectangle positions
function pos_rect(r) {
    if (r == null) {
        return coord_base;
    } else if (is_scalar(r)) {
        return [0, 0, r, r];
    } else if (r.length == 2) {
        let [rx, ry] = r;
        return [0, 0, rx, ry];
    } else {
        return r;
    }
}

function pad_rect(p) {
    if (p == null) {
        return coord_base;
    } else if (is_scalar(p)) {
        return [p, p, p, p];
    } else if (p.length == 2) {
        let [px, py] = p;
        return [px, py, px, py];
    } else {
        return p;
    }
}

// map padding/margin into internal boxes
function map_padmar(p, m, a) {
    let [pl, pt, pr, pb] = p;
    let [ml, mt, mr, mb] = m;
    let [pw, ph] = [pl+1+pr, pt+1+pb];
    let [tw, th] = [ml+pw+mr, mt+ph+mb];
    let crect = [(ml+pl)/tw, (mt+pt)/th, 1-(mr+pr)/tw, 1-(mb+pb)/th];
    let brect = [ml/tw, mt/th, 1-mr/tw, 1-mb/th];
    let basp = (a != null) ? a*(pw/ph) : null;
    let tasp = (a != null) ? a*(tw/th) : null;
    return [crect, brect, basp, tasp];
}

function rad_rect(p, r0) {
    let x, y, r, rx, ry;
    if (p.length == 1) {
        [r, ] = p;
        [x, y] = [0.5, 0.5];
        [rx, ry] = [r, r];
    } else if (p.length == 2) {
        [x, y] = p;
        [rx, ry] = is_scalar(r0) ? [r0, r0] : r0;
    } else if (p.length == 3) {
        [x, y, r] = p;
        [rx, ry] = [r, r];
    } else if (p.length == 4) {
        [x, y, rx, ry] = p;
    }
    return [x-rx, y-ry, x+rx, y+ry];
}

function merge_rects(rects) {
    let [xa, ya, xb, yb] = zip(...rects);
    return [
        min(...xa), min(...ya), max(...xb), max(...yb)
    ];
}

function rect_dims(rect) {
    let [xa, ya, xb, yb] = rect;
    let [w, h] = [xb - xa, yb - ya];
    return [abs(w), abs(h)];
}

function rect_aspect(rect) {
    let [w, h] = rect_dims(rect);
    return w/h;
}

function aspect_invariant(value, aspect, alpha) {
    aspect = aspect ?? 1;
    alpha = alpha ?? 0.5;

    let wfact = pow(aspect, alpha);
    let hfact = pow(aspect, 1-alpha);

    if (is_scalar(value)) {
        value = [value, value];
    }

    if (value.length == 2) {
        let [vw, vh] = value;
        return [vw*wfact, vh/hfact];
    } else if (value.length == 4) {
        let [vl, vt, vr, vb] = value;
        return [vl*wfact, vt/hfact, vr*wfact, vb/hfact];
    }
}

/**
 ** attributes
 **/

function prefix_split(pres, attr) {
    let attr1 = {...attr};
    let pres1 = pres.map(p => `${p}_`);
    let out = pres.map(p => Object());
    Object.keys(attr).map(k => {
        pres.forEach((p, i) => {
            if (k.startsWith(pres1[i])) {
                let k1 = k.slice(p.length+1);
                out[i][k1] = attr1[k];
                delete attr1[k];
            }
        });
    });
    return [...out, attr1];
}

function prefix_add(pre, attr) {
    return Object.fromEntries(
        Object.entries(attr).map(([k, v]) => [`${pre}_${k}`, v])
    );
}

/**
 ** string formatters
 **/

function demangle(k) {
    return k.replace('_', '-');
}

function rounder(x, prec) {
    prec = prec ?? prec_base;

    let suf;
    if (is_string(x) && x.endsWith('px')) {
        x = Number(x.substr(0, x.length-2));
        suf = 'px';
    } else {
        suf = '';
    }

    let ret;
    if (is_scalar(x)) {
        ret = x.toFixed(prec);
        ret = ret.replace(/(\.[0-9]*?)0+$/, '$1').replace(/\.$/, '');
    } else {
        ret = x;
    }

    return ret + suf;
}

function props_repr(d, prec) {
    return Object.entries(d)
        .filter(([k, v]) => v != null)
        .map(([k, v]) => `${demangle(k)}="${rounder(v, prec)}"`)
        .join(' ');
}

/**
 ** color handling
 **/

// Converts a #ffffff hex string into an [r,g,b] array
function hex2rgb(hex) {
    let result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16)
    ] : null;
}

function rgb2hex(rgb) {
    let r = round(rgb[0]).toString(16).padStart(2, '0');
    let g = round(rgb[1]).toString(16).padStart(2, '0');
    let b = round(rgb[2]).toString(16).padStart(2, '0');
    return `#${r}${g}${b}`;
}

function rgb2hsl(color) {
    let r = color[0]/255;
    let g = color[1]/255;
    let b = color[2]/255;

    let max = Math.max(r, g, b), min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;

    if (max == min) {
        h = s = 0; // achromatic
    } else {
        let d = max - min;
        s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l];
}

function interpolateVectors(c1, c2, alpha) {
    let len = min(c1.length, c2.length);
    return range(len).map(i => {
        let x = c1[i] + alpha*(c2[i]-c1[i]);
        return x.toFixed(3);
    });
}

function interpolateHex(c1, c2, alpha) {
    let v1 = hex2rgb(c1);
    let v2 = hex2rgb(c2);
    let v = interpolateVectors(v1, v2, alpha);
    return rgb2hex(v);
}

function interpolateVectorsPallet(c1, c2, n) {
    return linspace(0, 1, n)
        .map(alpha => interpolateVectors(c1, c2, alpha));
}

/**
 ** core classes
 **/

function degree_mod(degree, lower, upper) {
    return ((degree + lower) % (upper-lower)) - lower;
}

// public usage
function rotate_aspect(aspect, degree) {
    if (degree == null) { return aspect; }
    if (aspect == null) { return null; }
    let rotate = degree_mod(degree, -90, 90);
    let theta = (pi/180)*abs(rotate);
    return rotate_aspect_radians(aspect, theta);
}

// mostly private
function rotate_aspect_radians(aspect, theta) {
    return (aspect*cos(theta)+sin(theta))/(aspect*sin(theta)+cos(theta));
}

function align_frac(align) {
    if (is_scalar(align)) {
        return align;
    } else if (align == 'left' || align == 'top') {
        return 0;
    } else if (align == 'center' || align == 'middle') {
        return 0.5;
    } else if (align == 'right' || align == 'bottom') {
        return 1;
    } else {
        throw new Error(`Unrecognized alignment specification: ${align}`);
    }
}

class Context {
    constructor(prect, args) {
        let {coord, rrect, trans, prec} = args ?? {};
        this.prect = prect;
        this.rrect = rrect;
        this.coord = coord;
        this.trans = trans;
        this.prec = prec;
    }

    // map using both domain (frac) and range (rect)
    coord_to_pixel(coord) {
        let [cx, cy] = coord;
        let [cx1, cy1, cx2, cy2] = this.coord ?? coord_base;
        let [cw, ch] = [cx2 - cx1, cy2 - cy1];
        let [px1, py1, px2, py2] = this.prect;
        let [pw, ph] = [px2 - px1, py2 - py1];
        let [fx, fy] = [(cx-cx1)/cw, (cy-cy1)/ch];
        let [px, py] = [px1 + fx*pw, py1 + fy*ph];
        return [px, py];
    }

    // used for sizes such as radii or vectors
    coord_to_pixel_size(size) {
        let [sw, sh] = size;
        let [cx1, cy1, cx2, cy2] = this.coord ?? coord_base;
        let [cw, ch] = [cx2 - cx1, cy2 - cy1];
        let [px1, py1, px2, py2] = this.prect;
        let [pw, ph] = [px2 - px1, py2 - py1];
        let [px, py] = [sw*abs(pw)/abs(cw), sh*abs(ph)/abs(ch)];
        return [px, py];
    }

    // used for whole rectangles
    coord_to_pixel_rect(crect) {
        let [x1, y1, x2, y2] = crect;
        let [c1, c2] = [[x1, y1], [x2, y2]];
        let p1 = this.coord_to_pixel(c1);
        let p2 = this.coord_to_pixel(c2);
        let prect = [...p1, ...p2];
        return prect;
    }
    
    // project coordinates
    map(args) {
        let {rect, aspect, rotate, expand, invar, align, pivot, coord} = args ?? {};
        rect = rect ?? coord_base;
        rotate = rotate ?? 0;
        expand = expand ?? false;
        invar = invar ?? false;
        align = align ?? 'center';
        pivot = pivot ?? 'center';

        // remap rotation angle
        let degrees = degree_mod(rotate, -90, 90); // map to [-90, 90]
        let theta0 = abs(degrees)*(pi/180); // in radians
        let theta = invar ? 0 : theta0; // account for rotate?

        // sort out alignment
        let [halign, valign] = ensure_vector(align, 2);
        halign = 1 - align_frac(halign);
        valign = align_frac(valign);

        // sort out pivot point
        let [hpivot, vpivot] = ensure_vector(pivot, 2);
        hpivot = 1 - align_frac(hpivot);
        vpivot = align_frac(vpivot);

        // get true pixel rect
        let [px1, py1, px2, py2] = this.coord_to_pixel_rect(rect);
        let [pw0, ph0] = [px2 - px1, py2 - py1];

        // embedded rectangle aspect
        let asp0 = pw0/ph0; // pixel rect
        let rasp = aspect ?? asp0; // mimic outer if null
        let asp1 = rotate_aspect_radians(rasp, theta);

        // shink down if aspect mismatch
        let [tw, th] = [cos(theta)+sin(theta)/rasp, rasp*sin(theta)+cos(theta)];
        let [rw0, rh0] = [pw0/tw, ph0/th];
        let [pw1, ph1] = (expand ^ (asp0 >= asp1)) ? [rasp*rh0, rh0] : [rw0, rw0/rasp];
        let [rw1, rh1] = [pw1*tw, ph1*th];

        // get absolute sizes
        let [apw1, aph1] = [abs(pw1), abs(ph1)];
        let [arw1, arh1] = [abs(rw1), abs(rh1)];

        // get rotated/unrotated pixel rect
        let cx = (1-halign)*px1 + halign*px2 + (0.5-halign)*rw1;
        let cy = (1-valign)*py1 + valign*py2 + (0.5-valign)*rh1;
        let prect = [cx-0.5*apw1, cy-0.5*aph1, cx+0.5*apw1, cy+0.5*aph1];
        let rrect = invar ? prect : [cx-0.5*arw1, cy-0.5*arh1, cx+0.5*arw1, cy+0.5*arh1];

        // get transform string
        let vx = (1-hpivot)*px1 + hpivot*px2;
        let vy = (1-vpivot)*py1 + vpivot*py2;
        let [sx, sy] = [vx, vy].map(z => rounder(z, this.prec));
        let trans = (rotate != 0) ? `rotate(${rotate} ${sx} ${sy})` : null;

        return new Context(prect, {coord, rrect, trans, prec: this.prec});
    }
}

class Element {
    constructor(tag, unary, args) {
        let {aspect, ...attr} = args ?? {};
        this.tag = tag;
        this.unary = unary;
        this.aspect = aspect ?? null;

        // store non-null attributes
        this.attr = Object.fromEntries(
            Object.entries(attr).filter(([k, v]) => v != null)
        );
    }

    props(ctx) {
        return this.attr;
    }

    inner(ctx) {
        return '';
    }

    svg(ctx) {
        ctx = ctx ?? new Context(rect_base);

        // collect all properties
        let pvals = this.props(ctx);
        let trans = `${pvals.transform ?? ''} ${ctx.trans ?? ''}`.trim();
        if (trans.length > 0) { pvals.transform = trans; }

        // convert to strings
        let props = props_repr(pvals, ctx.prec);
        let pre = props.length > 0 ? ' ' : '';

        // return final svg
        if (this.unary) {
            return `<${this.tag}${pre}${props} />`;
        } else {
            return `<${this.tag}${pre}${props}>${this.inner(ctx)}</${this.tag}>`;
        }
    }
}

function parse_bounds(bnd) {
    if (bnd == null) {
        return {rect: coord_base};
    } else if (is_array(bnd)) {
        return {rect: bnd};
    } else if (is_object(bnd)) {
        let {pos, rad, ...bnd1} = bnd;
        pos = pos ?? [0.5, 0.5];
        rad = rad ?? [0.5, 0.5];
        let rect = rad_rect(pos, rad);
        return {rect, ...bnd1};
    } else {
        throw Error(`Unrecognized bound specification: ${bnd}`);
    }
}

class Container extends Element {
    constructor(children, args) {
        let {tag, aspect, coord, clip, debug, ...attr0} = args ?? {};
        let [debug_attr, attr] = prefix_split(['debug'], attr0);
        tag = tag ?? 'g';
        clip = clip ?? true;
        debug = debug ?? false;

        // handle singleton
        if (children instanceof Element) {
            children = [children];
        }

        // handle default positioning
        children = children
            .map(c => c instanceof Element ? [c, null] : c)
            .map(([c, r]) => [c, parse_bounds(r)]);

        // get data limits
        let xlim, ylim;
        if (children.length > 0) {
            let [xmins, ymins, xmaxs, ymaxs] = zip(...children.map(([c, a]) => a.rect));
            let [xall, yall] = [[...xmins, ...xmaxs], [...ymins, ...ymaxs]];
            xlim = [min(...xall), max(...xall)];
            ylim = [min(...yall), max(...yall)];
        }

        // inherit aspect of clipped contents
        if (aspect == null && clip) {
            let ctx = new Context(coord_base);
            let rects = children
                .filter(([c, a]) => c.aspect != null)
                .map(([c, a]) => ctx.map({aspect: c.aspect, ...a}).rrect);
            if (rects.length > 0) {
                let total = merge_rects(rects);
                aspect = rect_aspect(total);
            }
        }

        // debug styling
        let debug_rect;
        if (debug === true) {
            let debug_args1 = {fill: 'none', stroke: 'red', stroke_dasharray: 5, ...debug_attr};
            debug_rect = new Rect(debug_args1);
        }

        // pass to Element
        let attr1 = {aspect: aspect, ...attr};
        super(tag, false, attr1);
        this.children = children;
        this.coord = coord;
        this.xlim = xlim;
        this.ylim = ylim;
        this.debug = debug;
        this.debug_rect = debug_rect;
    }

    inner(ctx) {
        // empty container
        if (this.children.length == 0) {
            return '\n';
        }

        // map to new contexts and render
        let inside = this.children
            .map(([c, a]) => c.svg(
                ctx.map({aspect: c.aspect, coord: this.coord, ...a})
            ))
            .filter(s => s.length > 0)
            .join('\n');

        // debug rects
        if (this.debug) {
            let dstr = this.children
                .map(([c, a]) => this.debug_rect.svg(
                    ctx.map({aspect: c.aspect, coord: this.coord, ...a})
                ))
                .join('\n');
            inside = `${inside}\n${dstr}`;
        }

        // return padded
        return `\n${inside}\n`;
    }
}

class SVG extends Container {
    constructor(children, args) {
        let {clip, size, prec, ...attr} = args ?? {};
        clip = clip ?? true;
        size = size ?? size_base;
        prec = prec ?? prec_base;

        let attr1 = {tag: 'svg', clip: clip, ...svg_props_base, ...attr};
        super(children, attr1);

        if (is_scalar(size)) {
            if (this.aspect == null) {
                size = [size, size];
            } else if (this.aspect >= 1) {
                size = [size, size/this.aspect];
            } else {
                size = [size*this.aspect, size];
            }
        }

        this.size = size;
        this.prec = prec;
    }

    props(ctx) {
        let [w, h] = this.size;
        let box = `0 0 ${w} ${h}`;
        let base = {viewBox: box, xmlns: ns_svg};
        return {...base, ...this.attr};
    }

    svg() {
        let rect = [0, 0, ...this.size];
        let ctx = new Context(rect ,{prec: this.prec});
        return super.svg(ctx);
    }
}

/**
 ** layout classes
 **/

class Group extends Container {
    constructor(children, args) {
        super(children, args);
    }
}

class Frame extends Container {
    constructor(child, args) {
        let {
            padding, margin, border, aspect, adjust, flex, rotate, shrink, shape, ...attr0
        } = args ?? {};
        let [border_attr, attr] = prefix_split(['border'], attr0);
        border = border ?? 0;
        padding = padding ?? 0;
        margin = margin ?? 0;
        adjust = adjust ?? true;
        flex = flex ?? false;
        shape = shape ?? (a => new Rect(a));

        // convenience boxing
        padding = pad_rect(padding);
        margin = pad_rect(margin);

        // aspect adjusted padding/margin
        if (adjust && child.aspect != null) {
            padding = aspect_invariant(padding, 1/child.aspect);
            margin = aspect_invariant(margin, 1/child.aspect);
        }

        // get box sizes
        let casp = rotate_aspect(child.aspect, rotate);
        let iasp = aspect ?? casp;
        let [crect, brect, basp, tasp] = map_padmar(padding, margin, iasp);
        aspect = flex ? null : (aspect ?? tasp);

        // make border box
        let rargs = {stroke_width: border, ...border_attr};
        let rect = shape(rargs);

        // gather children
        let children = [[child, {rect: crect, rotate, shrink}]];
        if (border != 0) {
            children.unshift([rect, brect]);
        }

        // pass to Container
        let attr1 = {aspect, clip: false, ...attr};
        super(children, attr1);
    }
}

function get_orient(direc) {
    if (direc == 'v' || direc == 'vert' || direc == 'vertical') {
        return 'v';
    } else if (direc == 'h' || direc == 'horiz' || direc == 'horizontal') {
        return 'h';
    } else {
        throw new Error(`Unrecognized direction specification: ${direc}`);
    }
}

// expects list of Element or [Element, height]
// this is written as vertical, horizonal swaps dimensions and inverts aspects
class Stack extends Container {
    constructor(direc, children, args) {
        let {expand, align, spacing, aspect, debug, ...attr} = args ?? {};
        expand = expand ?? true;
        align = align ?? 'center';
        spacing = spacing ?? 0;
        aspect = aspect ?? 'auto';
        debug = debug ?? false;
        direc = get_orient(direc);

        // short circuit if empty
        let n = children.length;
        if (n == 0) {
            return super([], {aspect: aspect, ...attr});
        }

        // fill in missing heights with null
        let [elements, heights] = zip(...children.map(c => {
            if (is_element(c)) { return [c, null]; }
            else if (is_scalar(c)) { return [new Spacer(), c]; }
            else { return c; }
        }));

        // get aspects and adjust for direction
        let aspects = elements.map(c => c.aspect);
        let hasa = any(aspects.map(a => a != null));
        if (direc == 'h') {
            aspects = aspects.map(a => (a != null) ? 1/a : null);
        }

        // expand elements to fit width?
        let aspect_ideal = null, wlims;
        if (expand && !hasa) {
            // aspectless and full width
            heights = distribute_extra(heights);
            wlims = heights.map(w => [0, 1]);
        } else if (expand && hasa) {
            // if aspect, heights are adjusted so that all elements have full width
            // if no aspect, they can be stretched to full width anyway
            heights = zip(heights, aspects).map(([h, a]) => (a != null) ? 1/a : h);

            // renormalize heights and find ideal aspect
            let has = zip(heights, aspects);
            let atot = sum(has.map(([h, a]) => (a != null) ? h : null));
            let utot = sum(has.map(([h, a]) => (a == null) ? h : null));
            heights = has.map(([h, a]) => (a != null) ? (1-utot)*(h/atot) : h);
            aspect_ideal = (1-utot)/atot;

            // width is always full with expand
            wlims = heights.map(w => [0, 1]);
        } else {
            // fill in missing heights and find aspect widths
            heights = distribute_extra(heights);
            let widths = zip(heights, aspects).map(([h, a]) => (a != null) ? h*a : null);

            // ideal aspect determined by widest element
            let wmax = max(...widths) ?? 1;
            widths = widths.map(w => (w != null) ? w/wmax : 1);
            aspect_ideal = wmax;

            // set wlims according to alignment
            let afrac = align_frac(align);
            wlims = widths.map(w => (w != null) ? [afrac*(1-w), afrac+(1-afrac)*w] : [0, 1]);
        }

        // convert heights to cumulative intervals (with spacing)
        let pos = -spacing;
        let hlims = heights.map(y => [pos += spacing, pos += y]);
        hlims = hlims.map(([h1, h2]) => [h1/pos, h2/pos]);
        aspect_ideal = (aspect_ideal != null) ? aspect_ideal/pos : null;

        // if any element has an aspect, use ideal aspect
        // otherwise, just go with null aspect unless specified
        if (aspect == 'auto') {
            aspect = aspect_ideal;
        } else if (aspect == 'none') {
            aspect = null;
        }

        // swap dims if horizontal
        if (direc == 'h') {
            [wlims, hlims] = [hlims, wlims];
            aspect = (aspect != null) ? 1/aspect : null;
        }

        // compute child boxes
        children = zip(elements, wlims, hlims)
            .map(([c, [fw0, fw1], [fh0, fh1]]) => [c, [fw0, fh0, fw1, fh1]]);

        // add in debug lines
        if (debug) {
            let rect = new Rect({stroke: 'blue', stroke_dasharray: [4, 4]});
            let boxes = zip(wlims, hlims)
                .map(([[fw0, fw1], [fh0, fh1]]) => [rect, [fw0, fh0, fw1, fh1]]);
            children = [...children, ...boxes];
        }

        // pass to Container
        let attr1 = {aspect: aspect, ...attr};
        super(children, attr1);
    }
}

class VStack extends Stack {
    constructor(children, args) {
        super('v', children, args);
    }
}

class HStack extends Stack {
    constructor(children, args) {
        super('h', children, args);
    }
}

class Place extends Container {
    constructor(child, args) {
        let {rect, pos, rad, rotate, expand, invar, align, pivot, ...attr} = args ?? {};
        pos = pos ?? [0.5, 0.5];
        rad = rad ?? [0.5, 0.5];

        // ensure vector radius
        if (is_scalar(rad)) {
            rad = aspect_invariant(rad, child.aspect);
        }

        // find child position
        rect = rect ?? rad_rect(pos, rad);
        let spec = [child, {rect, rotate, expand, invar, align, pivot}];

        // pass to container
        let attr1 = {clip: false, ...attr};
        super([spec], attr1);
    }
}

class Rotate extends Container {
    constructor(child, rotate, args) {
        let {expand, invar, align, pivot, ...attr} = args ?? {};
        let spec = [child, {rotate, expand, invar, align, pivot}];
        let attr1 = {clip: true, ...attr};
        super([spec], attr1);
    }
}

class Anchor extends Container {
    constructor(child, args) {
        let {aspect, align, ...attr} = args ?? {};
        aspect = aspect ?? 1;
        align = align ?? 'left';

        let rmap = {
            'left': [1, 0, 1, 1], 'right': [0, 0, 0, 1],
            'top': [0, 0, 1, 0], 'bottom': [0, 1, 1, 1]
        };
        let rect = rmap[align];

        let spec = {rect, expand: true, align};
        super([[child, spec]], {aspect, ...attr});
    }
}

class Scatter extends Container {
    constructor(points, args) {
        let {size, shape, color, xlim, ylim, ...attr} = args ?? {};
        shape = shape ?? new Dot({color});
        size = size ?? 0.01;

        // handle different forms
        points = points.map(p => is_scalar(p[0]) ? [p] : p);
        points = points.map(p => is_element(p[0]) ? p : [shape, ...p]);
        points = points.map(p => (p.length >= 3) ? p : [...p, size]);

        // pass to container
        let children = points.map(([s, p, r]) => [s, rad_rect(p, r)]);
        let attr1 = {clip: false, ...attr};
        super(children, attr1);
    }
}

/**
 ** basic geometry
 **/

// this can have an aspect, which is utilized by layouts
class Spacer extends Element {
    constructor(args) {
        super(null, null, args);
    }

    svg(ctx) {
        return '';
    }
}

class Line extends Element {
    constructor(p1, p2, args) {
        let attr = args ?? {};
        super('line', true, attr);
        [this.p1, this.p2] = [p1, p2];
        [this.xlim, this.ylim] = zip(p1, p2);
    }

    props(ctx) {
        let [x1, y1] = ctx.coord_to_pixel(this.p1);
        let [x2, y2] = ctx.coord_to_pixel(this.p2);
        return {x1, y1, x2, y2, ...this.attr};
    }
}

class UnitLine extends Line {
    constructor(direc, pos, args) {
        let {lim, ...attr} = args ?? {};
        let [lo, hi] = lim ?? limit_base;
        direc = get_orient(direc);
        let [p1, p2] = (direc == 'v') ? [[pos, lo], [pos, hi]] : [[lo, pos], [hi, pos]];
        super(p1, p2, attr);
    }
}

class VLine extends UnitLine {
    constructor(pos, args) {
        super('v', pos, args);
    }
}

class HLine extends UnitLine {
    constructor(pos, args) {
        super('h', pos, args);
    }
}

class Rect extends Element {
    constructor(args) {
        let {p1, p2, radius, ...attr} = args ?? {};
        p1 = p1 ?? [0, 0];
        p2 = p2 ?? [1, 1];

        super('rect', true, attr);
        this.p1 = p1;
        this.p2 = p2;
        this.radius = radius;
        [this.xlim, this.ylim] = zip(p1, p2);
    }

    props(ctx) {
        let [x1, y1] = ctx.coord_to_pixel(this.p1);
        let [x2, y2] = ctx.coord_to_pixel(this.p2);

        // orient increasing
        let [x, y] = [x1, y1];
        let [w, h] = [x2 - x1, y2 - y1];
        if (w < 0) { x += w; w *= -1; }
        if (h < 0) { y += h; h *= -1; }

        // scale border radius
        let rx, ry;
        if (this.radius != null) {
            if (is_scalar(this.radius)) {
                let s = 0.5*(w+h);
                rx = s*this.radius;
            } else {
                let [rx0, ry0] = this.radius;
                [rx, ry] = [w*rx0, h*ry0];
            }
        }

        // output properties
        let base = {x, y, width: w, height: h, rx, ry};
        return {...base, ...this.attr};
    }
}

class Square extends Rect {
    constructor(args) {
        let {pos, rad, ...attr} = args ?? {};
        pos = pos ?? [0.5, 0.5];
        rad = rad ?? 0.5;

        let p1 = pos.map(z => z - rad);
        let p2 = pos.map(z => z + rad);
        let base = {p1, p2, aspect: 1};
        super({...base, ...attr});
    }
}

class Ellipse extends Element {
    constructor(args) {
        let {pos, rad, ...attr} = args ?? {};
        pos = pos ?? [0.5, 0.5];
        rad = rad ?? [0.5, 0.5];

        super('ellipse', true, attr);
        this.pos = pos;
        this.rad = rad;

        let [px, py] = pos;
        let [rx, ry] = rad;
        this.xlim = [px - rx, px + rx];
        this.ylim = [py - ry, py + ry];
    }

    props(ctx) {
        let [cx, cy] = ctx.coord_to_pixel(this.pos);
        let [rx, ry] = ctx.coord_to_pixel_size(this.rad);
        let base = {cx, cy, rx, ry};
        return {...base, ...this.attr};
    }
}

class Circle extends Ellipse {
    constructor(args) {
        let {pos, rad, ...attr} = args ?? {};
        pos = pos ?? [0.5, 0.5];
        rad = rad ?? 0.5;

        let rad2 = [rad, rad];
        let base = {pos, rad: rad2, aspect: 1};
        super({...base, ...attr});
    }
}

class Dot extends Ellipse {
    constructor(args) {
        let {color, rad, ...attr} = args ?? {};
        color = color ?? 'black';
        rad = ensure_vector(rad, 2);
        super({stroke: color, fill: color, rad, ...attr});
    }
}

class Ray extends Element {
    constructor(theta, args) {
        let {aspect, ...attr} = args ?? {};
        theta = theta ?? 45;

        // map into (-90, 90];
        if (theta < -90 || theta > 90) {
            theta = ((theta + 90) % 180) - 90;
        }
        if (theta == -90) {
            theta = 90;
        }

        // map theta into direction and aspect
        let direc;
        if (theta == 90) {
            direc = Infinity;
            aspect = 1;
        } else if (theta == 0) {
            direc = 0;
            aspect = 1;
        } else {
            let direc0 = tan(theta*(pi/180));
            direc = direc0;
            aspect = 1/abs(direc0);
        }

        // pass to Element
        super('line', true, {aspect, ...attr});
        this.direc = direc;
    }

    props(ctx) {
        if (!isFinite(this.direc)) ; else if (this.direc == 0) ; else if (this.direc > 0) ; else ;
        let [x1, y1] = ctx.coord_to_pixel(this.p1);
        let [x2, y2] = ctx.coord_to_pixel(this.p2);
        let base = {x1, y1, x2, y2};
        return {...base, ...this.attr};
    }
}

/**
 ** path builder
 **/

class Pointstring extends Element {
    constructor(tag, points, args) {
        let {xlim, ylim, ...attr} = args ?? {};
        super(tag, true, attr);
        this.points = points;
        if (points.length > 0) {
            let [xvals, yvals] = zip(...points);
            this.xlim = xlim ?? [min(...xvals), max(...xvals)];
            this.ylim = ylim ?? [min(...yvals), max(...yvals)];
        }
    }

    props(ctx) {
        let points = this.points.map(p => ctx.coord_to_pixel(p));
        let str = points.map(
            ([x, y]) => `${rounder(x, ctx.prec)},${rounder(y, ctx.prec)}`
        ).join(' ');
        return {points: str, ...this.attr};
    }
}

class Polyline extends Pointstring {
    constructor(points, attr) {
        super('polyline', points, attr);
    }
}

class Polygon extends Pointstring {
    constructor(points, attr) {
        super('polygon', points, attr);
    }
}

function arg(s, d, ctx) {
    if (s == 'xy') {
        let [x, y] = ctx.coord_to_pixel(d);
        return `${rounder(x, ctx.prec)},${rounder(y, ctx.prec)}`;
    } else {
        return `${d}`;
    }
}

class Command {
    constructor(cmd, spec, data) {
        this.cmd = cmd;
        this.spec = spec;
        this.data = data;
    }

    string(ctx) {
        let args = zip(this.spec, this.data)
            .map(([s, d]) => arg(s, d, ctx))
            .join(' ');
        return `${this.cmd} ${args}`;
    }
}

class MoveTo extends Command {
    constructor(p) {
        super('M', ['xy'], [p]);
        this.point = p;
    }
}

class LineTo extends Command {
    constructor(p) {
        super('L', ['xy'], [p]);
        this.point = p;
    }
}

class Bezier2 extends Command {
    constructor(p, p1) {
        if (p1 == null) {
            super('T', ['xy'], [p]);
        } else {
            super('Q', ['xy', 'xy'], [p1, p]);
        }
        this.point = p;
    }
}

class Bezier3 extends Command {
    constructor(p, p2, p1) {
        if (p1 == null) {
            super('S', ['xy', 'xy'], [p2, p]);
        } else {
            super('C', ['xy', 'xy', 'xy'], [p1, p2, p]);
        }
        this.point = p;
    }
}

class Arc extends Command {
    constructor(p, r, args) {
        let {angle, large, sweep} = args ?? {};
        angle = angle ?? 0;
        large = large ?? 1;
        sweep = sweep ?? 1;
        super('A', ['xy', '', '', '', 'xy'], [r, angle, large, sweep, p]);
    }
}

class Close extends Command {
    constructor() {
        super('Z', [], []);
    }
}

class Path extends Element {
    constructor(commands, args) {
        super('path', true, args);
        this.commands = commands;
        let [pxs, pys] = zip(
            ...commands.map(c => c.point).filter(p => p != null)
        );
        this.xlim = [min(...pxs), max(...pxs)];
        this.ylim = [min(...pys), max(...pys)];
    }

    props(ctx) {
        let cmd = this.commands.map(c => c.string(ctx)).join(' ');
        return {d: cmd, ...this.attr};
    }
}

function make_bezier2(d) {
    let [d0, ..._] = d;
    if (is_scalar(d0)) {
        return new Bezier2(d);
    } else if (is_array(d0)) {
        return new Bezier2(...d);
    } else {
        return d;
    }
}

class Bezier2Path extends Path {
    constructor(start, bezs, args) {
        start = new MoveTo(start);
        bezs = bezs.map(make_bezier2);   
        super([start, ...bezs], args);
    }
}

// draws little vectors for path
class Bezier2PathDebug extends Container {
    constructor(start, bezs, args) {
        let bezo = new Bezier2Path(start, bezs, args);
        let [nodes, arrows] = zip(...bezs);
        nodes.unshift(start);

        let red = new Dot({color: 'red'});
        let scatter1 = new Scatter(nodes, {size: 0.01});
        let scatter2 = new Scatter(arrows, {size: 0.007, shape: red});
        let lines = zip(nodes.slice(0, -1), arrows).map(([n, a]) =>
            new Line(n, a, {stroke: 'blue', stroke_dasharray: 2, opacity: 0.7})
        );

        super([bezo, ...lines, scatter1, scatter2]);
    }
}

class Bezier2Line extends Path {
    constructor(p0, p1, px, args) {
        let start = new MoveTo(p0);
        let bezer = new Bezier2(p1, px);
        super([start, bezer], args); 
    }
}

class Bezier3Line extends Path {
    constructor(p0, p1, px0, px1, args) {
        let start = new MoveTo(p0);
        let bezer = new Bezier3(p1, px0, px1);
        super([start, bezer], args); 
    }
}

/**
 ** text elements
 **/

class Text extends Element {
    constructor(text, args) {
        let {
            font_family, font_weight, size, actual, calc_family, calc_weight, calc_size, hshift, vshift, ...attr
        } = args ?? {};
        size = size ?? font_size_base;
        actual = actual ?? false;
        hshift = hshift ?? 0.0;
        vshift = vshift ?? -0.13;

        // select calculated fonts
        calc_family = calc_family ?? font_family ?? font_family_base;
        calc_weight = calc_weight ?? font_weight ?? font_weight_base;
        calc_size = calc_size ?? size;

        // compute text box
        let fargs = {family: calc_family, weight: calc_weight, calc_size: size, actual};
        let [xoff, yoff, width, height] = textSizer(text, fargs);
        [xoff, yoff, size] = [xoff/height, yoff/height, size/height];
        let aspect = width/height;

        // pass to element
        let attr1 = {aspect, font_family, font_weight, fill: 'black', ...attr};
        super('text', false, attr1);

        // store metrics
        this.xoff = xoff + hshift;
        this.yoff = yoff + vshift;
        this.size = size;
        this.text = text;
    }

    props(ctx) {
        // get pixel position
        let [x, y0] = ctx.coord_to_pixel([this.xoff, this.yoff]);
        let [w0, h0] = ctx.coord_to_pixel_size([0, this.size]);

        // get adjusted size
        let h = this.size*h0;
        let y = y0 + h;

        let base = {x, y, font_size: `${h}px`};
        return {...base, ...this.attr};
    }

    inner(ctx) {
        return this.text;
    }
}

class Tex extends Element {
    constructor(text, args) {
        let {size, actual, xover, yover, hshift, vshift, ...attr} = args ?? {};
        size = size ?? font_size_latex;
        actual = actual ?? false;
        yover = yover ?? 1.0;
        xover = xover ?? 1.0;
        hshift = hshift ?? -0.05;
        vshift = vshift ?? -0.05;

        // render with katex
        let katex$1 = katex.renderToString(text);

        // compute text box
        let [xoff, yoff, width, height] = sideRenderTextSizer(katex$1, {size, actual});
        [xoff, yoff, size] = [xoff/width, yoff/height, size/height];

        // pass to element
        let aspect = width/height;
        let attr1 = {aspect, ...attr};
        super('foreignObject', false, attr1);

        // store metrics
        this.xoff = xoff + hshift;
        this.yoff = yoff + vshift;
        this.size = size;
        this.xover = xover;
        this.yover = yover;
        this.katex = katex$1;
    }

    props(ctx) {
        // get pixel position
        let [x0, y0] = ctx.coord_to_pixel([this.xoff, this.yoff]);
        let [w0, h0] = ctx.coord_to_pixel_size([this.size*this.aspect, this.size]);

        // get adjusted size
        let w = (1+this.xover)*w0;
        let h = (1+this.yover)*h0;

        // get adjusted position
        let x = x0 + this.xoff*w;
        let y = y0 + this.yoff*h;

        let base = {x, y, width: w, height: h, font_size: `${h0}px`};
        return {...base, ...this.attr};
    }

    inner(ctx) {
        return this.katex;
    }
}

class Node extends Frame {
    constructor(text, args) {
        let {padding, border, spacing, align, latex, ...attr0} = args ?? {};
        let [text_attr, attr] = prefix_split(['text'], attr0);
        padding = padding ?? 0.1;
        spacing = spacing ?? 0.02;
        border = border ?? 1;
        latex = latex ?? false;

        // generate core elements
        let child;
        if (is_string(text)) {
            let Maker = latex ? Tex : Text;
            child = new Maker(text, text_attr);
        } else if (is_array(text)) {
            let lines = text.map(s => new Text(s, text_attr));
            child = new VStack(lines, {expand: false, align, spacing});
        } else {
            child = text;
        }

        // pass to container
        let attr1 = {padding, border, ...attr};
        super(child, attr1);
    }
}

/**
 ** networks
 **/

function get_center(elem) {
    let [xmin, xmax] = elem.xlim;
    let [ymin, ymax] = elem.ylim;
    let [x, y] = [0.5*(xmin+xmax), 0.5*(ymin+ymax)];
    return [x, y];
}

function get_direction(p1, p2) {
    let [x1, y1] = p1;
    let [x2, y2] = p2;

    let [dx, dy] = [x2 - x1, y2 - y1];
    let [ax, ay] = [abs(dx), abs(dy)];

    if (dy <= -ax) {
        return 'north';
    } else if (dy >= ax) {
        return 'south';
    } else if (dx >= ay) {
        return 'east';
    } else if (dx <= -ay) {
        return 'west';
    }
}

function get_anchor(elem, pos) {
    let [xmin, xmax] = elem.xlim;
    let [ymin, ymax] = elem.ylim;

    let xmid = 0.5*(xmin+xmax);
    let ymid = 0.5*(ymin+ymax);

    if (pos == 'north' || pos == 'top') {
        return [xmid, ymin];
    } else if (pos == 'south' || pos == 'bottom') {
        return [xmid, ymax];
    } else if (pos == 'east' || pos == 'right') {
        return [xmax, ymid];
    } else if (pos == 'west' || pos == 'left') {
        return [xmin, ymid];
    }
}

function norm_direc(direc) {
    if (direc == 'n' || direc == 'north') {
        return 'n';
    } else if (direc == 's' || direc == 'south') {
        return 's';
    } else if (direc == 'e' || direc == 'east') {
        return 'e';
    } else if (direc == 'w' || direc == 'west') {
        return 'w';
    } else {
        throw new Error(`Unrecognized direction specification: ${direc}`);
    }
}

class Arrowhead extends Container {
    constructor(args) {
        let {direc, pos, size, stroke_width, ...attr} = args ?? {};
        direc = direc ?? 0;
        pos = pos ?? [0.5, 0.5];
        size = size ?? [0.5, 0.5];
        stroke_width = stroke_width ?? 1;

        // stroke_width translate hack
        let theta = direc/r2d;
        let [offx, offy] = [cos(theta)*stroke_width, sin(theta)*stroke_width];
        let transform = `translate(${-0.5*offx}, ${0.5*offy})`;

        // generate arrowhead polygon
        let pattr = {fill: 'black', stroke_width, transform, ...attr};
        let poly = new Polygon([[0.5, 0.5], [0, 0], [0, 1]], pattr);

        // calculate size
        let size2 = ensure_vector(size, 2);
        let rect = rad_rect(pos, size2);

        // pass to group for rotate
        let child = [poly, {rect, rotate: -direc, invar: true}];
        super([child]);
    }
}

class Edge extends Container {
    constructor(beg, end, args) {
        let {curve, arrow, arrow_beg, arrow_end, arrow_size, debug, ...attr0} = args ?? {};
        let [arrow_beg_attr, arrow_end_attr, arrow_attr, line_attr, attr] = prefix_split(
            ['arrow_beg', 'arrow_end', 'arrow', 'line'], attr0
        );
        curve = curve ?? 0.3;
        arrow_size = arrow_size ?? 0.02;
        debug = debug ?? false;

        // accumulate arguments
        arrow_beg_attr = {size: arrow_size, ...arrow_attr, ...arrow_beg_attr};
        arrow_end_attr = {size: arrow_size, ...arrow_attr, ...arrow_end_attr};

        // final arrowheads
        arrow = arrow ?? false;
        arrow_end = arrow || (arrow_end ?? false);

        // determine directions
        let [[p1, d1], [p2, d2]] = [beg, end].map(pd => is_array(pd[0]) ? pd : [pd, null]);
        [d1, d2] = [d1 ?? get_direction(p1, p2), d2 ?? get_direction(p2, p1)];

        // unpack positions
        let [[x1, y1], [x2, y2]] = [p1, p2];
        let [dx, dy] = [x2 - x1, y2 - y1];

        // sort out directions
        [d1, d2] = [norm_direc(d1), norm_direc(d2)];
        let vert1 = d1 == 'n' || d1 == 's';
        let vert2 = d2 == 'n' || d2 == 's';
        let wide = abs(dx) > abs(dy);

        // optional arrowheads
        let arrow_dir = {'n': -90, 's': 90, 'e': 180, 'w': 0};
        let [rot1, rot2] = [arrow_dir[d1], arrow_dir[d2]];
        let ahead_beg = arrow_beg ? new Arrowhead({pos: p1, direc: rot1, ...arrow_beg_attr}) : null;
        let ahead_end = arrow_end ? new Arrowhead({pos: p2, direc: rot2, ...arrow_end_attr}) : null;

        // reorient so that when non-aliged:
        // (1) when wide, we go vertical first
        // (2) when tall, we go horizontal first
        if (vert1 != vert2) {
            if (vert1 != wide) {
                [p1, p2] = [p2, p1];
                [[x1, y1], [x2, y2]] = [[x2, y2], [x1, y1]];
                [dx, dy] = [-dx, -dy];
                [vert1, vert2] = [vert2, vert1];
            }
        }

        // curve levels by direction
        let curve1, curve2;
        if (vert1 == vert2) {
            [curve1, curve2] = [curve, curve];
        } else {
            [curve1, curve2] = [1.0, curve];
        }

        // anchor point 1
        let px1;
        if (vert1) {
            px1 = [x1, y1 + curve1*dy];
        } else {
            px1 = [x1 + curve1*dx, y1];
        }

        // anchor point 2
        let px2;
        if (vert2) {
            px2 = [x2, y2 - curve2*dy];
        } else {
            px2 = [x2 - curve2*dx, y2];
        }

        // center point
        let pc;
        if (vert1 == vert2) {
            pc = [0.5*(x1+x2), 0.5*(y1+y2)];
        } else {
            if (wide) {
                pc = [0.5*(x1+x2), y2];
            } else {
                pc = [x2, 0.5*(y1+y2)];
            }
        }

        // create bezier curves
        let BezClass = debug ? Bezier2PathDebug : Bezier2Path;
        let line = new BezClass(p1, [[pc, px1], [p2, px2]], line_attr);

        // pass to container
        let children = [line, ahead_beg, ahead_end].filter(x => x != null);
        super(children, attr);
    }
}

class Network extends Container {
    constructor(nodes, edges, args) {
        let {size, directed, aspect, debug, arrow_size, ...attr0} = args ?? {};
        let [node_attr, edge_attr, arrow_attr, attr] = prefix_split(['node', 'edge', 'arrow'], attr0);
        size = size ?? 0.1;
        directed = directed ?? false;
        arrow_size = arrow_size ?? [0.02, 0.015];

        // sort out final edge attributes
        arrow_size = aspect_invariant(arrow_size, 1/aspect);
        edge_attr = {
            arrow_end: directed, arrow_size, debug, ...edge_attr, ...prefix_add('arrow', arrow_attr)
        };

        // collect node boxes
        let make_node = b => new Node(b, {flex: true, ...node_attr});
        let bmap = Object.fromEntries(nodes.map(([s, b, p, r]) => {
            b = is_element(b) ? b : make_node(b);
            return [s, new Place(b, {pos: p, rad: r ?? size})];
        }));
        let boxes = Object.values(bmap);
        let cont1 = new Container(boxes);

        // collect edge paths
        let lines = edges.map(([na1, na2, eattr]) => {
            eattr = eattr ?? {};

            let [n1, d1] = is_array(na1) ? na1 : [na1, null];
            let [n2, d2] = is_array(na2) ? na2 : [na2, null];
            let [b1, b2] = [bmap[n1], bmap[n2]];

            let [p1, p2] = [get_center(b1), get_center(b2)];
            [d1, d2] = [d1 ?? get_direction(p1, p2), d2 ?? get_direction(p2, p1)];
            let [a1, a2] = [get_anchor(b1, d1), get_anchor(b2, d2)];

            return new Edge([a1, d1], [a2, d2], {...edge_attr, ...eattr});
        });
        let cont2 = new Container(lines);

        // find total limits
        let [xmins, xmaxs] = zip(...boxes.map(b => b.xlim));
        let [ymins, ymaxs] = zip(...boxes.map(b => b.ylim));

        // combine into container
        let attr1 = {aspect, ...attr};
        super([cont1, cont2], attr1);
        this.xlim = [min(...xmins), max(...xmaxs)];
        this.ylim = [min(...ymins), max(...ymaxs)];
        this.bmap = bmap;
    }

    get_anchor(tag, pos) {
        let box = this.bmap[tag];
        return get_anchor(box, pos);
    }
}

/**
 ** parametric paths
 **/

function func_or_scalar(x) {
    if (is_scalar(x)) {
        return () => x;
    } else {
        return x;
    }
}

// determines actual values given combinations of limits, values, and functions
function sympath(args) {
    let {fx, fy, xlim, ylim, tlim, xvals, yvals, tvals, N, ...attr} = args ?? {};
    tlim = tlim ?? limit_base;
    fx = func_or_scalar(fx);
    fy = func_or_scalar(fy);

    // determine data size
    let Ns = new Set([tvals, xvals, yvals].filter(v => v != null).map(v => v.length));
    if (Ns.size > 1) {
        throw new Error(`Error: data sizes must be in aggreement but got ${Ns}`);
    } else if (Ns.size == 1) {
        [N,] = Ns;
    } else {
        N = N ?? N_base;
    }

    // compute data values
    tvals = tvals ?? linspace(...tlim, N);
    if (fx != null && fy != null) {
        xvals = tvals.map(fx);
        yvals = tvals.map(fy);
    } else if (fy != null) {
        xvals = linspace(...xlim, N);
        yvals = xvals.map(fy);
    } else if (fx != null) {
        yvals = linspace(...ylim, N);
        xvals = yvals.map(fx);
    }

    return [tvals, xvals, yvals];
}

class SymPath extends Polyline {
    constructor(args) {
        let {fx, fy, xlim, ylim, tlim, xvals, yvals, tvals, N, ...attr} = args ?? {};

        // compute point values
        [tvals, xvals, yvals] = sympath({
            fx, fy, xlim, ylim, tlim, xvals, yvals, tvals, N
        });
        let points = zip(xvals, yvals);

        // pass to element
        super(points, attr);
    }
}

class SymFill extends Polygon {
    constructor(args) {
        let {fx1, fy1, fx2, fy2, xlim, ylim, N, ...attr} = args ?? {};

        // compute point values
        let [tvals1, xvals1, yvals1] = sympath({fx: fx1, fy: fy1, xlim, ylim, N});
        let [tvals2, xvals2, yvals2] = sympath({fx: fx2, fy: fy2, xlim, ylim, N});
        let points = [...zip(xvals1, yvals1), ...zip(xvals2, yvals2).reverse()];

        // pass to element
        super(points, attr);
    }
}

class SymPoly extends Polygon {
    constructor(args) {
        let {fx, fy, xlim, ylim, tlim, N, ...attr} = args ?? {};

        // compute point values
        let [tvals, xvals, yvals] = sympath({fx, fy, xlim, ylim, tlim, N});
        let points = zip(xvals, yvals);

        // pass to element
        super(points, attr);
    }
}

class SymPoints extends Container {
    constructor(args) {
        let {fx, fy, fs, fr, size, shape, xlim, ylim, tlim, xvals, yvals, tvals, N, ...attr} = args ?? {};
        size = size ?? 0.01;
        shape = shape ?? new Dot();
        fr = fr ?? (() => size);
        fs = fs ?? (() => shape);

        // compute point values
        [tvals, xvals, yvals] = sympath({
            fx, fy, xlim, ylim, tlim, xvals, yvals, tvals, N: N
        });

        // make points
        let points = zip(tvals, xvals, yvals);
        let children = points.map(([t, x, y]) =>
            [fs(x, y, t), rad_rect([x, y], fr(x, y, t))]
        );

        // pass to element
        let attr1 = {clip: false, ...attr};
        super(children, attr1);
    }
}

/**
 ** bar components
 **/

// no aspect, but has a ylim and optional width that is used by Bars
class Bar extends Stack {
    constructor(direc, lengths, args) {
        let {zero, size, ...attr} = args ?? {};
        zero = zero ?? 0;

        // get standardized direction
        direc = get_orient(direc);
        lengths = is_scalar(lengths) ? [lengths] : lengths;
        if (direc == 'v') { lengths = lengths.reverse(); }

        // normalize section specs
        let boxes = lengths.map(lc => is_scalar(lc) ? [lc, null] : lc);
        let length = sum(boxes.map(([l, c]) => l));
        let children = boxes.map(([l, c]) => [new Rect({fill: c}), l/length]);

        super(direc, children, attr);
        this.lim = [zero, zero + length];
        this.size = size;
    }
}

class VBar extends Bar {
    constructor(lengths, args) {
        super('v', lengths, args);
    }
}

class HBar extends Bar {
    constructor(lengths, args) {
        super('h', lengths, args);
    }
}

// custom bars must have a ylim and optionally a width
class Bars extends Container {
    constructor(direc, bars, args) {
        let {lim, zero, shrink, size, color, integer, ...attr0} = args ?? {};
        let [bar_attr, attr] = prefix_split(['bar'], attr0);
        zero = zero ?? 0;
        integer = integer ?? false;
        shrink = shrink ?? 0;
        let n = bars.length;

        // get standardized direction
        direc = get_orient(direc);

        // check input sizes
        let arrs = new Set(bars.map(is_array));
        if (arrs.size > 1) {
            throw new Error('Error: bar specs must all be same type');
        }
        let [arr,] = arrs;

        // expand scalar list case
        let vals;
        if (arr) {
            [vals, bars] = zip(...bars);
        } else {
            let lim_int = (n > 1) ? [0, n-1] : [-0.5, 0.5];
            let lim_def = (integer) ? lim_int : limit_base;
            lim = lim ?? lim_def;
            vals = linspace(...lim, n);
            if (direc == 'h') { vals = vals.reverse(); }
        }

        // get data parameters
        let [vmin, vmax] = [min(...vals), max(...vals)];
        size = size ?? ((n > 1) ? (1-shrink)*(vmax-vmin)/(n-1) : 1);

        // handle scalar and custom bars
        bars = bars.map(b =>
            is_scalar(b) ? new Bar(direc, [[b, color]], {zero, size, ...bar_attr}) : b
        );

        // aggregate lengths
        let [zmins, zmaxs] = zip(...bars.map(b => b.lim));
        let [zmin, zmax] = [min(...zmins), max(...zmaxs)];

        // compute boxes
        let children = zip(vals, bars).map(([v, b]) => {
            let [zlo, zhi, s] = [...b.lim, b.size ?? size];
            let box = (direc == 'v') ? [v-s/2, zlo, v+s/2, zhi] : [zlo, v-s/2, zhi, v+s/2];
            return [b, box];
        });

        // set up container
        let attr1 = {clip: false, ...attr};
        super(children, attr1);
        this.vals = vals;

        // set axis limits
        this.xlim = lim ?? [vmin, vmax];
        this.ylim = [zmin, zmax];
        if (direc == 'h') { [this.xlim, this.ylim] = [this.ylim, this.xlim]; }
    }
}

class VBars extends Bars {
    constructor(bars, args) {
        super('v', bars, args);
    }
}

class HBars extends Bars {
    constructor(bars, args) {
        super('h', bars, args);
    }
}

/**
 ** plotting elements
 **/

function make_ticklabel(s, prec, attr) {
    let attr1 = {border: 0, padding: 0, text_vshift: -0.13, ...attr};
    let text = rounder(s, prec);
    let node = new Node(text, attr1);
    return node;
}

function ensure_tick(t, prec) {
    prec = prec ?? 3;
    if (is_scalar(t)) {
        return [t, make_ticklabel(t, prec)];
    } else if (is_array(t) && t.length == 2) {
        let [p, x] = t;
        if (x instanceof Element) {
            return t;
        } else {
            return [p, make_ticklabel(x, prec)];
        }
    } else {
        throw new Error(`Error: tick must be value or [value,label] but got "${t}"`);
    }
}

class Scale extends Container {
    constructor(direc, locs, args) {
        let {lim, ...attr} = args ?? {};
        direc = get_orient(direc);
        let tick_dir = (direc == 'v') ? 'h' : 'v';
        let tick = new UnitLine(tick_dir, 0.5);
        let [lo, hi] = lim;
        let rect = t => (direc == 'v') ? [lo, t-0.5, hi, t+0.5] : [t-0.5, lo, t+0.5, hi];
        let children = locs.map(t => [tick, rect(t)]);
        super(children, attr);
    }
}

class VScale extends Scale {
    constructor(ticks, args) {
        super('v', ticks, args);
    }
}

class HScale extends Scale {
    constructor(ticks, args) {
        super('h', ticks, args);
    }
}

// this is used by axis with the main coordinates defined
// label elements must have an aspect to properly size them
class Labels extends Container {
    constructor(direc, ticks, args) {
        let {align, prec, ...attr} = args ?? {};
        direc = get_orient(direc);
        ticks = ticks.map(x => ensure_tick(x, prec));
        align = align ?? 'left';

        // anchor vertical ticks to unit-aspect boxes
        if (direc == 'v') {
            ticks = ticks.map(([t, c]) => [t, new Anchor(c, {align})]);
        }

        // place tick boxes using expanded lines
        let rect = t => (direc == 'v') ?
            {pos: [0.5, t], rad: [0.5, 0], expand: true} :
            {pos: [t, 0.5], rad: [0, 0.5], expand: true};
        let children = ticks.map(([t, c]) => [c, rect(t)]);

        super(children, {clip: false, ...attr});
    }
}

class HLabels extends Labels {
    constructor(ticks, args) {
        super('h', ticks, args);
    }
}

class VLabels extends Labels {
    constructor(ticks, args) {
        super('v', ticks, args);
    }
}

function get_ticklim(lim) {
    if (lim == null || lim == 'up' || lim == 'right') {
        return [0.5, 1];
    } else if (lim == 'down' || lim == 'left') {
        return [0, 0.5];
    } else if (lim == 'both') {
        return [0, 1];
    } else {
        return lim;
    }
}

// this is designed to be plotted directly
class Axis extends Container {
    constructor(direc, ticks, args) {
        let {
            pos, lim, tick_size, tick_pos, label_size, label_pos, prec, ...attr0
        } = args ?? {};
        let [label_attr, tick_attr, line_attr, attr] = prefix_split(['label', 'tick', 'line'], attr0);
        direc = get_orient(direc);
        label_size = label_size ?? tick_label_size_base;
        tick_size = tick_size ?? tick_size_base;
        pos = pos ?? 0.5;
        lim = lim ?? limit_base;

        // get numerical tick limits
        let tick_lim = get_ticklim(tick_pos);
        let tick_half = 0.5*tick_size;

        // sort out label position
        let label_pos0 = (direc == 'v') ? 'left' : 'bottom';
        label_pos = label_pos ?? label_pos0;
        let lab_size = label_size*tick_size;
        let lab_outer = label_pos == 'left' || label_pos == 'bottom';
        let lab_base = lab_outer ? (-tick_half-lab_size) : tick_half;

        // extract tick information
        let [lo, hi] = lim;
        ticks = is_scalar(ticks) ? linspace(lo, hi, ticks) : ticks;
        ticks = ticks.map(t => ensure_tick(t, prec));
        let locs = ticks.map(([t, x]) => t);

        // accumulate children
        let cline = new UnitLine(direc, 0.5, {lim, ...line_attr});
        let scale = new Scale(direc, locs, {lim: tick_lim, ...tick_attr});
        let label = new Labels(direc, ticks, {align: label_pos, ...label_attr});
 
        // position children (main direction has data coordinates)
        let lbox, sbox;
        if (direc == 'v') {
            sbox = [pos-tick_half, lo, pos+tick_half, hi];
            lbox = [pos+lab_base, lo, pos+lab_base+lab_size, hi];
        } else {
            sbox = [lo, pos-tick_half, hi, pos+tick_half];
            lbox = [lo, pos+lab_base, hi, pos+lab_base+lab_size];
        }

        // pass to container
        let tcoord = (direc == 'v') ? [0, hi, 1, lo] : [lo, 1, hi, 0];
        let children = [[cline, sbox], [scale, sbox], [label, lbox]];
        super(children, {coord: tcoord, ...attr});
        this.ticks = ticks;

        // set limits
        if (direc == 'v') {
            this.xlim = [pos, pos];
            this.ylim = lim; 
        } else {
            this.xlim = lim;
            this.ylim = [pos, pos];
        }
    }
}

class HAxis extends Axis {
    constructor(ticks, args) {
        super('h', ticks, args);
    }
}

class VAxis extends Axis {
    constructor(ticks, args) {
        super('v', ticks, args);
    }
}

class XLabel extends Frame {
    constructor(text, attr) {
        let label = is_element(text) ? text : new Text(text, attr);
        super(label);
    }
}

class YLabel extends Frame {
    constructor(text, attr) {
        let label = is_element(text) ? text : new Text(text, attr);
        super(label, {rotate: -90});
    }
}

class Title extends Frame {
    constructor(text, attr) {
        let label = is_element(text) ? text : new Text(text, attr);
        super(label);
    }
}

class Grid extends Scale {
    constructor(direc, locs, args) {
        let {lim, opacity, ...attr} = args ?? {};
        lim = lim ?? limit_base;
        opacity = opacity ?? 0.2;
        super(direc, locs, {lim, opacity, ...attr});
    }
}

class HGrid extends Grid {
    constructor(locs, args) {
        super('h', locs, args);
    }
}

class VGrid extends Grid {
    constructor(locs, args) {
        super('v', locs, args);
    }
}

function make_legendbadge(c, attr0) {
    attr0 = attr0 ?? {};
    let attr;
    if (is_string(c)) {
        attr = {stroke: c, ...attr0};
    } else if (is_object(c)) {
        attr = {...c, ...attr0};
    } else {
        throw new Error(`Unrecognized legend badge specification: ${c}`);
    }
    return new HLine(0.5, {aspect: 1, ...attr});
}

function make_legendlabel(s) {
    return new Text(s);
}

class Legend extends Place {
    constructor(data, args) {
        let {badgewidth, vspacing, hspacing, rect, pos, rad, ...attr0} = args ?? {};
        let [badge_attr, attr] = prefix_split(['badge'], attr0);
        badgewidth = badgewidth ?? 0.1;
        hspacing = hspacing ?? 0.025;
        vspacing = vspacing ?? 0.1;

        let [badges, labels] = zip(...data);
        badges = badges.map(b => is_element(b) ? b : make_legendbadge(b, badge_attr));
        labels = labels.map(t => is_element(t) ? t : make_legendlabel(t));

        let bs = new VStack(badges, {spacing: vspacing});
        let ls = new VStack(labels, {expand: false, align: 'left', spacing: vspacing});
        let vs = new HStack([bs, ls], {spacing: hspacing});

        let fr = new Frame(vs, attr);
        super(fr, {rect, pos, rad});
    }
}

class Note extends Place {
    constructor(text, args) {
        let {latex, ...attr0} = args ?? {};
        latex = latex ?? false;
        let [text_attr, attr] = prefix_split(['text'], attr0);

        let Maker = latex ? Tex : Text;
        let label = new Maker(text, text_attr);
        super(label, attr);
    }
}

// find minimal containing limits
function outer_limits(elems, padding) {
    padding = padding ?? 0;
    let [xpad, ypad] = ensure_vector(padding, 2);

    let [xmins, xmaxs] = zip(...elems.map(c => c.xlim).filter(z => z != null));
    let [ymins, ymaxs] = zip(...elems.map(c => c.ylim).filter(z => z != null));

    let xlim = expand_limits([min(...xmins), max(...xmaxs)], xpad);
    let ylim = expand_limits([min(...ymins), max(...ymaxs)], ypad);

    return [xlim, ylim];
}

function expand_limits(lim, fact) {
    let [lo, hi] = lim;
    let ex = fact*(hi-lo);
    return [lo-ex, hi+ex];
}

class Graph extends Container {
    constructor(elems, args) {
        let {xlim, ylim, aspect, padding, ...attr} = args ?? {};
        aspect = aspect ?? 'auto';
        padding = padding ?? 0;

        // handle singleton line
        if (elems instanceof Element) {
            elems = [elems];
        }

        // determine coordinate limits
        let [xlim0, ylim0] = outer_limits(elems, padding);
        xlim = xlim ?? xlim0;
        ylim = ylim ?? ylim0;

        // make coordinate box
        let [xmin, xmax] = xlim;
        let [ymin, ymax] = ylim;
        let coord = [xmin, ymax, xmax, ymin];

        // get automatic aspect
        aspect = (aspect == 'auto') ? rect_aspect(coord) : aspect;

        // pass to container
        let attr1 = {aspect, coord, ...attr};
        super(elems, attr1);
        this.xlim = xlim;
        this.ylim = ylim;
    }
}

class Plot extends Container {
    constructor(elems, args) {
        let {
            xlim, ylim, xaxis, yaxis, xticks, yticks, grid, xgrid, ygrid, xlabel, ylabel,
            title, tick_size, label_size, label_offset, title_size, title_offset, xlabel_size,
            ylabel_size, xlabel_offset, ylabel_offset, padding, prec, aspect, ...attr0
        } = args ?? {};
        xaxis = xaxis ?? true;
        yaxis = yaxis ?? true;
        xticks = xticks ?? num_ticks_base;
        yticks = yticks ?? num_ticks_base;
        tick_size = tick_size ?? tick_size_base;
        aspect = aspect ?? 'auto';

        // some advanced piping
        let [
            xaxis_attr, yaxis_attr, axis_attr, xgrid_attr, ygrid_attr, grid_attr, xlabel_attr,
            ylabel_attr, label_attr, title_attr, attr
        ] = prefix_split([
            'xaxis', 'yaxis', 'axis', 'xgrid', 'ygrid', 'grid', 'xlabel', 'ylabel', 'label',
            'title'
        ], attr0);
        [xaxis_attr, yaxis_attr] = [{...axis_attr, ...xaxis_attr}, {...axis_attr, ...yaxis_attr}];
        [xgrid_attr, ygrid_attr] = [{...grid_attr, ...xgrid_attr}, {...grid_attr, ...ygrid_attr}];
        [xlabel_attr, ylabel_attr] = [{...label_attr, ...xlabel_attr}, {...label_attr, ...ylabel_attr}];

        // handle singleton line
        if (elems instanceof Element) {
            elems = [elems];
        }

        // determine coordinate limits
        let [xlim0, ylim0] = outer_limits(elems, padding);
        [xlim, ylim] = [xlim ?? xlim0, ylim ?? ylim0];
        let [[xlo, xhi], [ylo, yhi]] = [xlim, ylim];
        let [xrange, yrange] = [abs(xhi-xlo), abs(yhi-ylo)];

        // ensure consistent apparent tick size
        aspect = (aspect == 'auto') ? xrange/yrange : aspect;
        let [xtick_size, ytick_size] = aspect_invariant(tick_size, aspect);
        [xtick_size, ytick_size] = [yrange*xtick_size, xrange*ytick_size];

        // default xaxis generation
        if (xaxis === true) {
            xaxis = new HAxis(xticks, {
                pos: ylo, lim: xlim, tick_size, tick_size: xtick_size, ...xaxis_attr
            });
        } else if (xaxis === false) {
            xaxis = null;
        }


        // default yaxis generation
        if (yaxis === true) {
            yaxis = new VAxis(yticks, {
                pos: xlo, lim: ylim, tick_size, tick_size: ytick_size, ...yaxis_attr
            });
        } else if (yaxis === false) {
            yaxis = null;
        }

        // automatic grid path
        if (grid === true || xgrid === true) {
            xgrid = (xaxis != null) ? xaxis.ticks.map(([x, t]) => x) : null;
        }
        if (grid === true || ygrid === true) {
            ygrid = (yaxis != null) ? yaxis.ticks.map(([y, t]) => y) : null;
        }
        if (is_array(xgrid)) {
            xgrid = new HGrid(xgrid, {lim: ylim, ...xgrid_attr});
        }
        if (is_array(ygrid)) {
            ygrid = new VGrid(ygrid, {lim: xlim, ...ygrid_attr});
        }

        // create graph from core elements
        let elems1 = [xgrid, ygrid, ...elems, xaxis, yaxis].filter(z => z != null);
        let graph = new Graph(elems1, {xlim, ylim, aspect, padding});

        // create base layout
        let children = [graph];

        // sort out label size and offset
        if (xlabel != null || ylabel != null) {
            label_size = label_size ?? label_size_base;
            let [xlabelsize, ylabelsize] = aspect_invariant(label_size, aspect);
            xlabel_size = xlabel_size ?? xlabelsize;
            ylabel_size = ylabel_size ?? ylabelsize;

            label_offset = label_offset ?? label_offset_base;
            let [xlabeloffset, ylabeloffset] = aspect_invariant(label_offset, aspect);
            xlabel_offset = xlabel_offset ?? xlabeloffset;
            ylabel_offset = ylabel_offset ?? ylabeloffset;
        }

        // optional axis labels
        if (xlabel != null) {
            xlabel = new XLabel(xlabel, xlabel_attr);
            let xlabel_rect = [0, 1+xlabel_offset, 1, 1+xlabel_offset+xlabel_size];
            children.push([xlabel, xlabel_rect]);
        }
        if (ylabel != null) {
            ylabel = new YLabel(ylabel, ylabel_attr);
            let ylabel_rect = [-ylabel_offset-ylabel_size, 0, -ylabel_offset, 1];
            children.push([ylabel, ylabel_rect]);
        }

        // optional plot title
        if (title != null) {
            title_size = title_size ?? title_size_base;
            title_offset = title_offset ?? title_offset_base;
            title = new Title(title, title_attr);
            let title_rect = [0, -title_offset-title_size, 1, -title_offset];
            children.push([title, title_rect]);
        }

        // pass to container
        let attr1 = {aspect, ...attr};
        super(children, attr1);
    }
}

class BarPlot extends Plot {
    constructor(data, args) {
        let {direc, aspect, shrink, padding, color, ...attr0} = args ?? {};
        let [bars_attr, attr] = prefix_split(['bars'], attr0);
        direc = direc ?? 'v';
        aspect = aspect ?? phi;
        shrink = shrink ?? 0.2;
        color = color ?? 'lightgray';
        let n = data.length;

        // standardize direction
        direc = get_orient(direc);

        // set up appropriate padding
        let zpad = min(0.5, 1/n);
        let padding0 = (direc == 'v') ? [zpad, 0] : [0, zpad];
        padding = padding ?? padding0;

        // generate actual bars
        let [labs, bars] = zip(...data);
        let bars1 = new Bars(direc, bars, {shrink, color, ...bars_attr});
        let ticks = zip(bars1.vals, labs);

        // send to general plot
        let attr1 = {aspect, padding, ...attr};
        if (direc == 'v') { attr1.xticks = ticks; } else { attr1.yticks = ticks; }
        super(bars1, attr1);
    }
}

//// INTERACTIVE

class InterActive {
    constructor(vars, func) {
        this.gumify = func;
        this.vars = vars;
    }

    create(redraw) {
        let vals = Object.fromEntries(
            Object.entries(this.vars).map(([k, v]) => [k, v.value])
        );
        if (redraw != null) {
            let elem = this.gumify(vals);
            if (elem instanceof Element) {
                elem = (elem instanceof SVG) ? elem : new SVG(elem);
                elem = elem.svg();
            }
            redraw.innerHTML = elem;
        }
        return this.gumify(vals);
    }

    createAnchors(redraw) { // tag is where to append anc, redraw is where to redraw
        let i = this;
        let ancs = Object.entries(this.vars).map(([v, k]) => {
            try {
                let z = k.anchor(v, i, redraw);
                return z;
            } catch {
                return null;
            }
        });
        return ancs;
    }
}

class Variable {
    constructor(init, args) {
        args = args ?? {};
        this.value = init;
        this.attr = Object.fromEntries(
            Object.entries(args).filter(([k, v]) => v != null)
        );
    }

    updateVal(val, ctx, redraw) {
        this.value = val;
        ctx.create(redraw);
    }
}

class Slider extends Variable {
    constructor(init, args) {
        let {min, max, step, ...attr} = args ?? {};
        min = min ?? 0;
        max = max ?? 100;
        step = step ?? 1;

        let attr1 = {min, max, step, ...attr};
        super(init, attr1);
    }

    // ctx is an interactive context
    anchor(name, ctx, redraw) {
        let v = this;
        let {min, max, step} = v.attr;

        let cont = document.createElement('div');
        cont.className = 'var_cont slider_cont';

        let slider = document.createElement('div');
        slider.className = 'slider';

        let title = document.createElement('div');
        title.className = 'var_title';
        title.innerHTML = v.attr.title ?? `Slider: ${name}`;

        let valInd = document.createElement('span');
        valInd.id = `sliderVal_${name}`;
        valInd.className = 'slider_label';
        valInd.innerHTML = this.value;

        let phantomTrack = document.createElement('div');
        phantomTrack.className = 'phantom_track';

        let trackWrap = document.createElement('div');
        trackWrap.className = 'phantom_track_wrap';

        let min_lim = document.createElement('div');
        min_lim.innerHTML = min;
        min_lim.className = 'min_lim';
        let max_lim = document.createElement('div');
        max_lim.innerHTML = max;
        max_lim.className = 'max_lim';

        trackWrap.append(min_lim, phantomTrack, max_lim);

        let input = document.createElement('input');
        input.type = 'range';
        input.min = min;
        input.max = max;
        input.step = step;
        input.value = this.value;
        input.className = 'slider_input'; // set the CSS class
        input.id = `InterActive_${name}`;

        slider.append(trackWrap, valInd, input);
        cont.append(title, slider); // slider in cont in targ!

        updateSliderValue(input);
        input.addEventListener('input', function() {
            updateSliderValue(this);
            v.updateVal(this.value, ctx, redraw);
        }, false);

        return cont;
    }
}


class Toggle extends Variable {
    constructor(init, args) {
        init = init == undefined ? true : init;
        args = args ?? {};
        super(init, args);
    }

    // ctx is an interactive context
    anchor(name, ctx, redraw) {
        let v = this;

        let checkinner = `
<span class="toggle-indicator">
    <span class="checkMark">
        <svg width="20" height="20">
            <use xlink:href="icons.svg#svg-check"></use>
        </svg>
    </span>
</span>
`.trim();

        let cont = document.createElement('div');
        cont.className = 'var_cont toggle_cont';

        let toggle = document.createElement('label');
        toggle.className = 'toggle';

        let track = document.createElement('span');
        track.className = 'toggle-track';
        track.innerHTML = checkinner;

        let title = document.createElement('div');
        title.className = 'var_title';
        title.innerHTML = v.attr.title ?? `Toggle: ${name}`;

        let input = document.createElement('input');
        input.type = 'checkbox';
        input.className = 'toggle__input';
        input.checked = this.value;
        input.id = `InterActive_${name}`;

        toggle.append(input, track);
        //targ.appendChild(cont).append(title, toggle); // slider in cont in targ!
        cont.append(title, toggle); // slider in cont in targ!
        input.addEventListener('input', function() {
            v.updateVal(this.checked, ctx, redraw);
        }, false);

        return cont
    }
}

class List extends Variable {
    constructor(init, args) {
        args = args ?? {};
        args.choices = args.choices ?? {};

        if (args.choices instanceof Array) {
            args.choices = args.choices.reduce((a, v) => ({ ...a, [v]: v}), {});
        }

        super(init, args);
    }

    // ctx is an interactive context
    anchor(name, ctx, redraw) {
        let v = this;

        let wrap = document.createElement('div');
        wrap.className = 'custom-select-wrapper';

        let source = document.createElement('div');
        source.className = 'custom-select sources';

        let trigger = document.createElement('span');
        trigger.className = 'custom-select-trigger';
        trigger.innerHTML = v.value;

        let opts = document.createElement('div');
        opts.className = 'custom-options';


        wrap.appendChild(source).append(trigger, opts);

        Object.entries(v.attr.choices).forEach(([label, value]) => {

        let o  = document.createElement('div');
        o.className = 'custom-option';
        o.innerHTML = label;
        o.setAttribute('data-value', value);
        opts.append(o);
        o.addEventListener('click', function() {
                let opt = this.closest('.custom-select');
                let opt_txt = this.textContent;
                let opt_val = this.getAttribute('data-value');
                opt.querySelector('.custom-select-trigger').innerHTML = opt_txt;
                v.updateVal(opt_val, ctx, redraw);
                opt.classList.toggle("opened");
            }, false);
        });


        let cont = document.createElement('div');
        cont.className = 'var_cont list_cont';

        let list = document.createElement('div');
        list.className = 'list';
        list.appendChild(wrap);

        let title = document.createElement('div');
        title.className = 'var_title';
        title.innerHTML = v.attr.title ?? `List: ${name}`;

        cont.append(title, list); // slider in cont in targ!

        list.querySelector('.custom-select-trigger').addEventListener('click', function() {
                this.parentElement.classList.toggle("opened");
            }, false);

        return cont
    }
}

/// shit for making interactive bits beautiful

function updateSliderValue(slider) {
    let pos = (slider.value - slider.min) / (slider.max - slider.min);
    let len = slider.getBoundingClientRect().width;
    let lab = slider.parentNode.querySelector('.slider_label');
    let lef = (100*pos*(len-30))/len;
    lab.innerHTML = slider.value;
    lab.style.left = `${lef}%`; //in prec for window resize events
}

//// Animation

class Animation {
    //vars must be numeric
    constructor(vars, steps, func, fps=20) {
        this.gumify = func;
        this.steps = steps;
        this.init = {...vars};//copy object
        this.vals = vars;
        this.fps = fps;
        this.pos = 0; //current frame
        this.playing = false;
        this.frameList = this.createFrameList();

    }

    create(redraw) {
        if (redraw != null) {
            let elem = this.gumify(this.vals);
            if (elem instanceof Element) {
                elem = (elem instanceof SVG) ? elem : new SVG(elem);
                elem = elem.svg();
            }
            redraw.innerHTML = elem;
        }
        return this.gumify(this.vals);
    }

    createAnchors(redraw) { // tag is where to append anc, redraw is where to redraw
        let i = this;

        let cont = document.createElement('div');
        cont.className = 'var_cont animate_cont';

        let input = document.createElement('button');
        input.textContent = 'Play';
        input.className = 'animateplay__input';

        cont.append(input);
        input.addEventListener('click', function() {
            i.playpause(redraw, input);
        }, false);

        return [cont]
    }


    createFrameList(){
        //list of lists, inner list [dict of vars and ranges, time]

        let frameList=[];
        this.steps.forEach((step) =>{
            let vars = step[0];
            let time = step[1];
            let n = ceil(time * (this.fps / 1000));

            let stepFrames = [...Array(n+1).keys()].map((k) => {
                let frame = {};
                Object.entries(vars).forEach(([v,r]) => {
                    frame[v] = r[0] + k*((r[1] - r[0])/n);
                });
                return frame;
            });
            frameList.push(...stepFrames);

        });
        return frameList;

    }

    animate(redraw, input){
        let frameList = this.frameList;
        let stop = frameList.length;
        this.metronome = setInterval(()=>{
            if(this.pos < stop){
            Object.entries(frameList[this.pos]).forEach(([k, v]) => {
                this.vals[k] = v;
                this.create(redraw);
            });
            this.pos += 1;
            }else {
                clearInterval(this.metronome);
                this.playing = false;
                this.pos = 0;
                this.vals = {...this.init}; //copy to not connect init
                input.textContent = 'RePlay';
            }
        }, 1000/this.fps);
    }

    playpause(redraw, input){
        if(this.playing){
            clearInterval(this.metronome);
            input.textContent = 'Play';
            this.playing = false;
        } else {
            this.animate(redraw, input);
            input.textContent = 'Pause';
            this.playing = true;
        }
    }
}

/**
 ** expose
 **/

let Gum = [
    Context, Element, Container, Group, SVG, Frame, VStack, HStack, Place, Rotate, Anchor, Scatter, Spacer, Ray, Line, HLine, VLine, Rect, Square, Ellipse, Circle, Dot, Polyline, Polygon, Path, Arrowhead, Text, Tex, Node, MoveTo, LineTo, Bezier2, Bezier3, Arc, Bezier2Path, Bezier2Line, Bezier3Line, Edge, Network, Close, SymPath, SymFill, SymPoly, SymPoints, Bar, VBar, HBar, Bars, VBars, HBars, Scale, VScale, HScale, Labels, VLabels, HLabels, Axis, HAxis, VAxis, Grid, Graph, Plot, BarPlot, Legend, Note, InterActive, Variable, Slider, Toggle, List, Animation, range, linspace, enumerate, repeat, split, hex2rgb, rgb2hex, rgb2hsl, interpolateVectors, interpolateHex, interpolateVectorsPallet, gzip, zip, pos_rect, pad_rect, rad_rect, exp, log, sin, cos, min, max, abs, pow, sqrt, floor, ceil, round, pi, phi, r2d, rounder, make_ticklabel, aspect_invariant, random, random_uniform, random_gaussian, cumsum
];

// detect object types
function detect(g) {
    if ('prototype' in g) {
        let [t, ...x] = g.toString().split(' ');
        return t;
    } else {
        return 'value';
    }
}

// interface mapper
let gums = Gum.map(g => g.name);
let mako = Gum.map(g => {
    let t = detect(g);
    if (t == 'class') {
        let func = function(...args) {
            return new g(...args);
        };
        func.class = g;
        return func;
    } else if (t == 'function') {
        return function(...args) {
            return g(...args);
        }
    } else {
        return g;
    }
});

// main parser entry
function parseGum(src) {
    let expr = new Function(gums, src);
    return expr(...mako);
}

export { Anchor, Animation, Arc, Arrowhead, Axis, Bar, BarPlot, Bars, Bezier2, Bezier2Line, Bezier2Path, Bezier3, Bezier3Line, Circle, Close, Container, Context, Dot, Edge, Element, Ellipse, Frame, Graph, Grid, Group, Gum, HAxis, HBar, HBars, HLabels, HLine, HScale, HStack, InterActive, Labels, Legend, Line, LineTo, List, MoveTo, Network, Node, Note, Path, Place, Plot, Polygon, Polyline, Ray, Rect, Rotate, SVG, Scale, Scatter, Slider, Spacer, Square, SymFill, SymPath, SymPoints, SymPoly, Tex, Text, Toggle, VAxis, VBar, VBars, VLabels, VLine, VScale, VStack, Variable, abs, aspect_invariant, ceil, cos, cumsum, demangle, enumerate, exp, floor, gums, gzip, hex2rgb, interpolateHex, interpolateVectors, interpolateVectorsPallet, linspace, log, make_ticklabel, mako, max, min, pad_rect, parseGum, phi, pi, pos_rect, pow, props_repr, r2d, rad_rect, random, random_gaussian, random_uniform, range, repeat, rgb2hex, rgb2hsl, round, rounder, sin, split, sqrt, zip };
